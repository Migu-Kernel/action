name: build-kernel

on:
  pull_request:
  workflow_dispatch:
    inputs:
      KERNEL_TREE_1:
        description: 'Kernel Tree'
        default: 'https://github.com/Migu-Kernel/kernel_sm8250'
        required: true
      KERNEL_TREE_BRANCH_1:
        description: 'Kernel Tree Branch 1'
        default: 'next-main'
        required: true
      CODENAME:
        description: 'Phone Codename'
        default: 'alioth'
        required: true
      ANYKERNEL_URL:
        description: 'AnyKernel Url (leave blank if you dont want AnyKernel)'
        default: 'https://github.com/Migu-Kernel/anykernel3-test'
        required: false
      MODULE_TEMPLATE:
        description: 'Module Template Url'
        default: 'https://github.com/Migu-Kernel/kernel_modules'
        required: false
      CUSTOM_SED:
        description: 'Custom Kernel Version'
        default: '-Migu'
        required: false
      COMPILER:
        description: 'Choose compiler'
        required: true
        type: choice
        options:
          - neutron
          - aosp
        default: neutron
      LTO_CHOICE:
        required: true
        type: choice
        options:
          - full_lto
          - thin_lto
        default: full_lto
      PATCH_SKIP:
        description: 'select yes if for stable branch'
        required: true
        type: choice
        options:
          - 'yes'
          - 'no'
        default: 'no'

jobs:
  build:
    strategy:
      matrix:
        kernel: [1, 2, 3]
        type: [original, modified]
    runs-on: ubuntu-latest
    env:
      UPLOAD_TO_RELEASE: false

    steps:
      - name: Install Dependencies
        run: sudo apt install flex libncurses6

      - name: Download & Extract Clang
        run: |
          if [[ "${{ github.event.inputs.COMPILER }}" == "aosp" ]]; then
            wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main/clang-r547379.tar.gz -O clang.tar.gz
            mkdir clang
            tar -xf clang.tar.gz -C clang
          else
            wget https://github.com/Neutron-Toolchains/clang-build-catalogue/releases/download/10032024/neutron-clang-10032024.tar.zst -O clang.tar.zst
            mkdir clang
            unzstd -d clang.tar.zst
            tar -xf clang.tar -C clang
          fi
          
      - name: Set Kernel Environment Variables
        run: |
          echo "KERNEL_TREE_BRANCH=${{ github.event.inputs.KERNEL_TREE_BRANCH_1 }}" >> $GITHUB_ENV
          
      - name: Checkout Kernel via PAT
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          if [[ "${{ github.event.inputs.KERNEL_TREE_1 }}" == "private" ]]; then
            REPO_URL="https://x-access-token:${GH_PAT}@github.com/re-noroi/FD-private.git"
          else
            REPO_URL="${{ github.event.inputs.KERNEL_TREE_1 }}"
          fi
          git clone --depth=1 --branch "${{ env.KERNEL_TREE_BRANCH }}" "${REPO_URL}" kernel_tree

      - name: Set DTBO tag (stk / j3s)
        run: |
          if [[ "${{ matrix.kernel }}" == "1" ]]; then
            echo "DTBO_TAG=stock" >> $GITHUB_ENV
          else
            echo "DTBO_TAG=j3s" >> $GITHUB_ENV
          fi

      - name: Revert to stock gpufreq
        if: matrix.kernel == 3
        run: |
          cd kernel_tree
          patch -p1 -f < "0001-stock-gpu-freq.patch"

      - name: Change LTO Type
        if: ${{ github.event.inputs.LTO_CHOICE == 'thin_lto' }}
        run: |
          cd kernel_tree
          sed -i -e '/# CONFIG_LTO_CLANG_THIN is not set/c\CONFIG_LTO_CLANG_THIN=y;' arch/arm64/configs/vendor/alioth_defconfig
          sed -i -e '/CONFIG_LTO_CLANG_FULL=y/c\# CONFIG_LTO_CLANG_FULL is not set;' arch/arm64/configs/vendor/alioth_defconfig

      - name: Change different battery type
        if: matrix.kernel == 1
        run: |
          cd kernel_tree
          sed -i -e '/qcom,j3s-batt-profile;/d' arch/arm64/boot/dts/vendor/qcom/alioth-sm8250.dtsi
      
      - name: Kernel Version
        run: |
          cd kernel_tree
          if [[ "${{ github.event.inputs.CUSTOM_SED }}" != "-Migu" ]]; then
            sed -i -e 's/CONFIG_LOCALVERSION="-Migu"/CONFIG_LOCALVERSION="${{ github.event.inputs.CUSTOM_SED }}"/' arch/arm64/configs/vendor/alioth_defconfig
          fi
      
      - name: Apply Patches
        if: ${{ github.event.inputs.PATCH_SKIP == 'no' }}
        run: |
          cd kernel_tree
          bash nextpatch.sh
          
      - name: Apply Modifications (if modified build)
        if: matrix.type == 'modified'
        run: |
          cd kernel_tree
          sed -i -e '/<2553600>,/c\<2553600>;' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
          sed -i -e '/<2649600>,/c\//<2649600>,' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
          sed -i -e '/<2745600>,/c\//<2745600>,' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
          sed -i -e '/<2841600>,/c\//<2841600>,' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
          sed -i -e '/<3187200>;/c\//<3187200>;' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
          sed -i -e 's/qcom,mdss-pan-physical-width-dimension = <70>;/qcom,mdss-pan-physical-width-dimension = <695>;/' arch/arm64/boot/dts/vendor/qcom/dsi-panel-k11a-38-08-0a-dsc-cmd.dtsi
          sed -i -e 's/qcom,mdss-pan-physical-height-dimension = <155>;/qcom,mdss-pan-physical-height-dimension = <1546>;/' arch/arm64/boot/dts/vendor/qcom/dsi-panel-k11a-38-08-0a-dsc-cmd.dtsi
      
      - name: Build Kernel
        run: |
          export PATH="$(pwd)/clang/bin:$PATH"
          export ARCH=arm64
          export SUBARCH=ARM64
          export KBUILD_BUILD_USER="nocrypt"
          export KBUILD_BUILD_HOST="revolution"
          export KBUILD_BUILD_TIMESTAMP="$(TZ=UTC-7 date)"
          cd kernel_tree
          make O=out vendor/alioth_defconfig
          make O=out CC=clang -j$(nproc --all) CROSS_COMPILE=aarch64-linux-gnu- LLVM=1 LLVM_IAS=1
          if [[ "${{ matrix.kernel }}" == 1 ]]; then
            if [[ "${{ matrix.type }}" == "original" ]]; then
              cp out/arch/arm64/boot/Image.gz ../Image.gz
              mv out/arch/arm64/boot/dtbo.img ../alioth-${DTBO_TAG}-dtbo-aosp.img
              mv out/arch/arm64/boot/dtb.img ../alioth-normal-dtb
            else
              mv out/arch/arm64/boot/dtbo.img ../alioth-${DTBO_TAG}-dtbo-miui.img
              mv out/arch/arm64/boot/dtb.img ../alioth-effcpu-dtb
            fi
          elif [[ "${{ matrix.kernel }}" == 3 ]]; then
            if [[ "${{ matrix.type }}" == "original" ]]; then
              mv out/arch/arm64/boot/dtb.img ../alioth-normal-gpustk-dtb
            else
              mv out/arch/arm64/boot/dtb.img ../alioth-effcpu-gpustk-dtb
            fi
          else
            if [[ "${{ matrix.type }}" == "original" ]]; then
              mv out/arch/arm64/boot/dtbo.img ../alioth-${DTBO_TAG}-dtbo-aosp.img
            else
              mv out/arch/arm64/boot/dtbo.img ../alioth-${DTBO_TAG}-dtbo-miui.img
            fi
          fi

      - name: Upload Kernel Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-${{ matrix.kernel }}-${{ matrix.type }}
          path: |
            *.img
            *-dtb
            Image.gz
            
      - name: Make Kernel Modules (rtl8188eus / 8812au / 8814au)
        if: ${{ matrix.kernel == '2' && matrix.type == 'modified' }}
        run: |
          set -euo pipefail
          # Toolchain + kernel paths (match your kernel build)
          export PATH="$(pwd)/clang/bin:$PATH"
          export ARCH=arm64
          export SUBARCH=ARM64
          export LLVM=1
          export LLVM_IAS=1
          # Kernel tree + out dir (same as your build step)
          KERNEL_DIR="$(pwd)/kernel_tree"
          OUT="$KERNEL_DIR/out"
          # Sanity: make sure the kernel was built so headers/config exist
          test -f "$OUT/.config" || { echo "ERROR: $OUT/.config not found. Build kernel first."; exit 1; }
          # Get driver sources (shallow)
          mkdir -p external && cd external
          git clone --depth=1 https://github.com/aircrack-ng/rtl8188eus.git
          git clone --depth=1 https://github.com/aircrack-ng/rtl8812au.git
          git clone --depth=1 https://github.com/aircrack-ng/rtl8814au.git
          # Build helper (uses kernel build system via M=<dir>)
          build_mod () {
            local moddir="$1"
            echo "::group::Building $(basename "$moddir")"
            make -C "$KERNEL_DIR" O="$OUT" M="$moddir" CC=clang LLVM=1 LLVM_IAS=1 CROSS_COMPILE=aarch64-linux-gnu- -j"$(nproc --all)" modules
            echo "::endgroup::"
          }
          build_mod "$PWD/rtl8188eus"
          build_mod "$PWD/rtl8812au"
          build_mod "$PWD/rtl8814au"
          # Strip and collect .ko to workspace root for artifact upload
          find . -name '*.ko' -exec llvm-strip --strip-debug {} \; 2>/dev/null || true
          find . -name '*.ko' -print -exec cp {} "$GITHUB_WORKSPACE"/ \;
          # List results
          cd "$GITHUB_WORKSPACE"
          ls -lh *.ko || true
          echo "Note: ship firmware (e.g., rtlwifi/rtl8188eufw.bin) in your Magisk/KSU module."

      - name: Upload Kernel Modules Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-modules
          path: |
            *.ko
        

  package_anykernel:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download Kernel Build Original (stk)
      uses: actions/download-artifact@v4
      with:
        name: kernel-1-original
        path: kernel-1-original

    - name: Download Kernel Build Modified (stk)
      uses: actions/download-artifact@v4
      with:
        name: kernel-1-modified
        path: kernel-1-modified

    - name: Download Kernel Build Original (j3s)
      uses: actions/download-artifact@v4
      with:
        name: kernel-2-original
        path: kernel-2-original

    - name: Download Kernel Build Modified (j3s)
      uses: actions/download-artifact@v4
      with:
        name: kernel-2-modified
        path: kernel-2-modified

    - name: Download GPU DTBs
      uses: actions/download-artifact@v4
      with:
        name: kernel-3-original
        path: kernel-3-original

    - name: Download GPU DTBs Modified
      uses: actions/download-artifact@v4
      with:
        name: kernel-3-modified
        path: kernel-3-modified

    - name: Clone AnyKernel3
      run: git clone --recursive --depth=1 ${{ github.event.inputs.ANYKERNEL_URL }} -b main AnyKernel3

    - name: Move All Kernel Files into AnyKernel3
      run: |
        mv kernel-1-original/* AnyKernel3/
        mv kernel-1-modified/* AnyKernel3/
        mv kernel-2-original/* AnyKernel3/
        mv kernel-2-modified/* AnyKernel3/
        cp kernel-3-original/alioth-normal-gpustk-dtb AnyKernel3/
        cp kernel-3-modified/alioth-effcpu-gpustk-dtb AnyKernel3/

    - name: Define ZIP Name
      run: |
        COMPILED_DATE=$(date +%Y%m%d)
        echo "ZIP_NAME=MG-${{ github.event.inputs.CODENAME }}-$COMPILED_DATE" >> $GITHUB_ENV

    - name: Upload Flashable Kernel Zip
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ZIP_NAME }}
        path: |
          AnyKernel3/
          !AnyKernel3/.git
          !AnyKernel3/.github

  package_module:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download Kernel Build Original (stk)
      uses: actions/download-artifact@v4
      with:
        name: kernel-modules
        path: kernel-modules

    - name: Clone Template
      run: git clone --recursive --depth=1 ${{ github.event.inputs.MODULE_TEMPLATE }} -b main Template

    - name: Move All Kernel Modules into Template
      run: |
        mv kernel-modules/* Template/system/lib/modules/

    - name: Define ZIP Name
      run: |
        COMPILED_DATE=$(date +%Y%m%d)
        echo "ZIP_NAME=KSU_MODULE-MG-${{ github.event.inputs.CODENAME }}-$COMPILED_DATE" >> $GITHUB_ENV

    - name: Upload Flashable Kernel Zip
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ZIP_NAME }}
        path: |
          Template/
          !Template/.git
          !Template/.github


      
